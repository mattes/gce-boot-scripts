#cloud-config

bootcmd:
  - mkdir -p /mnt/disks/helpers/bin
  - mount -t tmpfs tmpfs /mnt/disks/helpers/bin

write_files:
  - path: /etc/profile.d/helpers.sh
    content: export PATH="/mnt/disks/helpers/bin:$PATH"

  - path: /etc/profile.d/home.sh
    content: export HOME=/home

  - path: /etc/profile.d/lc_all.sh
    content: export LC_ALL=C

  # simulate docker-credential-gcr configure-docker
  - path: /home/.docker/config.json
    permissions: '0755'
    content: |
      { "auths": {}, "credHelpers": { "asia.gcr.io": "gcr", "eu.gcr.io": "gcr", "gcr.io": "gcr", "marketplace.gcr.io": "gcr", "us.gcr.io": "gcr" } }

  - path: /mnt/disks/helpers/bin/project_id
    permissions: '0755'
    content: |
      #!/bin/bash
      curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/project/project-id

  - path: /mnt/disks/helpers/bin/access_token
    permissions: '0755'
    content: |
      #!/bin/bash
      curl -s -H "Metadata-Flavor: Google" http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token | cut -d'"' -f 4

  - path: /mnt/disks/helpers/bin/fetch_secret
    permissions: '0755'
    content: |
      #!/bin/bash
      data=$(curl -s "https://secretmanager.googleapis.com/v1/projects/$(project_id)/secrets/$1/versions/latest:access" \
        -H "Authorization: Bearer $(access_token)" -H "Content-Type: application/json" | jq -r '.payload.data')
      decoded=$(echo "$data" | base64 -d)
      if [[ $? == 0 ]]; then echo "$decoded"; else echo "$data"; fi
  
  - path: /var/log/rails-cmd.log
    permissions: '0666'

  - path: /mnt/disks/helpers/bin/rails
    permissions: '0755'
    content: |
      #!/bin/bash
      args=("$@")
      interactive=false
      container=
      service=
      port=
      envs=()
      run=
      healthcheck_port=
      graceful_shutdown_sec=
      stop_signal="SIGTERM"
      dry_run=false
      help=false
      verbose=false
      
      while :; do
        case $1 in
          -i|--interactive) interactive=true;;
          -c|--container) container=$2; shift;;
          -s|--service) service=$2; shift;;
          -p|--port) port=$2; shift;;
          -e|--env) envs+=("${2%=*}='${2#*=}'"); shift;;
          -r|--run) run=$2; shift;;
          --stop-signal) stop_signal=$2; shift;;
          --healthcheck-port) healthcheck_port=$2; shift;;
          --graceful-shutdown) graceful_shutdown_sec=$2; shift;;
          --dry-run) dry_run=true;;
          -h|--help) help=true;;
          --verbose) verbose=true;;
          --) shift; break;;
          -?*) printf 'WARN: Ignored unknown option: %s\n' "$1" >&2;;
          *) break
        esac
        shift
      done
      
      if $help; then
        echo "Please visit https://github.com/mattes/gce-boot-scripts/blob/master/rails/RAILS.md for help."
        exit 0
      fi
      
      mountopts() {
        local size=$1
        echo "noexec,mode=770,size=$size,uid=65534,gid=65534"
      }
      
      die() {
        echo $1; exit 1
      }
      
      if [[ -z "$container" ]]; then container=$service; fi
      if [[ -n $healthcheck_port && $interactive == true ]]; then die "--healthcheck-port can't be used in --interactive mode"; fi
      if [[ -n $graceful_shutdown_sec && $interactive == true ]]; then die "--graceful-shutdown can't be used in --interactive mode"; fi
      
      container=${container//[^a-zA-Z0-9]/_} # replace non-ascii with underscore
      
      cmd=("docker run")
      cmd+=("-e SERVICE='$service'")
      if ! $interactive; then
        cmd+=("--name='$container'")
        cmd+=("--detach")
        cmd+=("--log-driver=gcplogs")
        cmd+=("--restart=on-failure")
        cmd+=("--cidfile='/var/run/pids/$container.cid'")
      else
        cmd+=("--interactive") 
        cmd+=("--tty") 
        cmd+=("--rm") 
        cmd+=("-e RAILS_LOG_TO_STDOUT=true")
      fi
      cmd+=("${envs[@]/#/-e }")
      cmd+=("-e GOOGLE_SECRETS_PREFIX='${{SECRETS_PREFIX}}'")
      cmd+=("--net=host")
      cmd+=("--stop-signal='$stop_signal'")
      cmd+=("--read-only")
      cmd+=("--tmpfs=/tmp:`mountopts 1G`")
      cmd+=("--tmpfs=/app/tmp:`mountopts 1G`")
      cmd+=("--tmpfs=/app/tmp/cache:`mountopts 1G`")
      cmd+=("--tmpfs=/app/tmp/pids:`mountopts 10M`")
      cmd+=("--tmpfs=/app/storage:`mountopts 1G`")
      cmd+=("${{DOCKER_IMAGE}}")
      cmd+=("$run")
      
      prettyOut="$(printf '%s \\\n  '  "${cmd[@]}")"
      prettyOut="${prettyOut%\\*}"
      if $dry_run || $verbose; then echo "$prettyOut"; fi
      
      if ! $dry_run; then 
        # write rails cmd log
        echo "rails ${args[@]}" >> /var/log/rails-cmd.log # BUG: preserve arg's quotes
        echo -e "$prettyOut\n" >> /var/log/rails-cmd.log
      
        # start container and open port
        eval "${cmd[@]}"
        if [[ -n $port ]]; then
          sudo iptables -w -A INPUT -p tcp --dport "$port" -j ACCEPT
        fi
      
        if [[ -n $healthcheck_port ]]; then
          # listen for healthchecks and check if container is running
          nohup healthcheck -listen "0.0.0.0:$healthcheck_port" -command "docker inspect '$container' --format '{{json .State.Status }}' | grep running" >> /var/log/cloud-init-output.log 2>&1 & echo $! > "/var/run/pids/$container-healthcheck.pid"
          sudo iptables -w -A INPUT -p tcp --dport "$healthcheck_port" -j ACCEPT
        fi
      
        if [[ -n $graceful_shutdown_sec ]]; then
          # First send --stop-signal to container, then wait for container to stop.
          # `docker wait` returns zero/ success status code if container stopped already or stops within --graceful-shutdown period.
          # If the container does not shut down within grace period, `docker wait` is killed and the container receives a SIGTERM signal.
          # After that it's up to the process in the container to wind things down. We don't send SIGKILL to the container
          # to give it time until the instance is eventually deleted by Google Cloud.
          nohup graceful-shutdown -timeout "${graceful_shutdown_sec}s" -on-shutdown "docker kill --signal '$stop_signal' '$container'; timeout --signal KILL ${graceful_shutdown_sec}s docker wait '$container' || docker kill --signal SIGTERM '$container'" >> /var/log/cloud-init-output.log 2>&1 & echo $! > "/var/run/pids/$container-graceful-shutdown.pid"
        fi
      fi

  - path: /mnt/disks/helpers/bin/console
    permissions: '0755'
    content: |
      #!/bin/bash
      rails --interactive --service console --run "rails console"

runcmd:
  - export HOME=/home
  - export PATH="/mnt/disks/helpers/bin:$PATH"
  - mkdir -p /var/run/pids && chmod a+w /var/run/pids

  - wget -q -O /mnt/disks/helpers/bin/graceful-shutdown https://github.com/mattes/gce-graceful-shutdown/releases/download/v1.0.0/gce-graceful-shutdown.linux.amd64 
  - chmod +x /mnt/disks/helpers/bin/graceful-shutdown

  - wget -q -O /mnt/disks/helpers/bin/healthcheck https://github.com/mattes/healthcheck-cmd/releases/download/v1.0.0/healthcheck-cmd.linux.amd64
  - chmod +x /mnt/disks/helpers/bin/healthcheck

  - wget -q -O /mnt/disks/helpers/bin/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
  - chmod +x /mnt/disks/helpers/bin/jq

  - export CLOUDSQL_PROXY_VERSION=1.18.0
  - until docker pull gcr.io/cloudsql-docker/gce-proxy:$CLOUDSQL_PROXY_VERSION; do sleep 3; done
  - >
    docker run -d --name cloudsql-proxy -p 127.0.0.1:5432:5432 --restart on-failure
    gcr.io/cloudsql-docker/gce-proxy:$CLOUDSQL_PROXY_VERSION /cloud_sql_proxy
    -instances=$(fetch_secret '${{SECRETS_PREFIX}}_CLOUDSQL_INSTANCE')=tcp:0.0.0.0:5432

  # docker pull with retries
  - until docker pull "${{DOCKER_IMAGE}}"; do sleep 3; done

  - ${{RUN}}

